<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ElementOrderCodeFix" xml:space="preserve">
    <value>Fix element order</value>
  </data>
  <data name="ModifierOrderCodeFix" xml:space="preserve">
    <value>Fix modifier order</value>
  </data>
  <data name="SA1200DescriptionInside" xml:space="preserve">
    <value>A C# using directive is placed outside of a namespace element.</value>
  </data>
  <data name="SA1200DescriptionOutside" xml:space="preserve">
    <value>A C# using directive is placed inside of a namespace declaration.</value>
  </data>
  <data name="SA1200MessageFormatInside" xml:space="preserve">
    <value>Using directive should appear within a namespace declaration</value>
  </data>
  <data name="SA1200MessageFormatOutside" xml:space="preserve">
    <value>Using directive should appear outside a namespace declaration</value>
  </data>
  <data name="SA1200Title" xml:space="preserve">
    <value>Using directives should be placed correctly</value>
  </data>
  <data name="SA1201Description" xml:space="preserve">
    <value>An element within a C# code file is out of order in relation to the other elements in the code.</value>
  </data>
  <data name="SA1201MessageFormat" xml:space="preserve">
    <value>A {0} should not follow a {1}</value>
  </data>
  <data name="SA1201Title" xml:space="preserve">
    <value>Elements should appear in the correct order</value>
  </data>
  <data name="SA1202Description" xml:space="preserve">
    <value>An element within a C# code file is out of order in relation to other elements in the code.</value>
  </data>
  <data name="SA1202MessageFormat" xml:space="preserve">
    <value>'{0}' members should come before '{1}' members</value>
  </data>
  <data name="SA1202Title" xml:space="preserve">
    <value>Elements should be ordered by access</value>
  </data>
  <data name="SA1203Description" xml:space="preserve">
    <value>A constant field is placed beneath a non-constant field.</value>
  </data>
  <data name="SA1203MessageFormat" xml:space="preserve">
    <value>Constant fields should appear before non-constant fields</value>
  </data>
  <data name="SA1203Title" xml:space="preserve">
    <value>Constants should appear before fields</value>
  </data>
  <data name="SA1204Description" xml:space="preserve">
    <value>A static element is positioned beneath an instance element.</value>
  </data>
  <data name="SA1204MessageFormat" xml:space="preserve">
    <value>Static members should appear before non-static members</value>
  </data>
  <data name="SA1204Title" xml:space="preserve">
    <value>Static elements should appear before instance elements</value>
  </data>
  <data name="SA1205CodeFix" xml:space="preserve">
    <value>Add access modifier</value>
  </data>
  <data name="SA1205Description" xml:space="preserve">
    <value>The partial element does not have an access modifier defined.</value>
  </data>
  <data name="SA1205MessageFormat" xml:space="preserve">
    <value>Partial elements should declare an access modifier</value>
  </data>
  <data name="SA1205Title" xml:space="preserve">
    <value>Partial elements should declare access</value>
  </data>
  <data name="SA1206Description" xml:space="preserve">
    <value>The keywords within the declaration of an element do not follow a standard ordering scheme.</value>
  </data>
  <data name="SA1206MessageFormat" xml:space="preserve">
    <value>The '{0}' modifier should appear before '{1}'</value>
  </data>
  <data name="SA1206Title" xml:space="preserve">
    <value>Declaration keywords should follow order</value>
  </data>
  <data name="SA1207CodeFix" xml:space="preserve">
    <value>Place keyword 'protected' before keyword 'internal'</value>
  </data>
  <data name="SA1207Description" xml:space="preserve">
    <value>The keyword '{0}' is positioned after the keyword '{1}' within the declaration of a {0} {1} C# element.</value>
  </data>
  <data name="SA1207MessageFormat" xml:space="preserve">
    <value>The keyword '{0}' should come before '{1}'</value>
  </data>
  <data name="SA1207Title" xml:space="preserve">
    <value>Protected should come before internal</value>
  </data>
  <data name="SA1208Description" xml:space="preserve">
    <value>A using directive which declares a member of the 'System' namespace appears after a using directive which declares a member of a different namespace, within a C# code file.</value>
  </data>
  <data name="SA1208MessageFormat" xml:space="preserve">
    <value>Using directive for '{0}' should appear before directive for '{1}'</value>
  </data>
  <data name="SA1208Title" xml:space="preserve">
    <value>System using directives should be placed before other using directives</value>
  </data>
  <data name="SA1209Description" xml:space="preserve">
    <value>A using-alias directive is positioned before a regular using directive.</value>
  </data>
  <data name="SA1209MessageFormat" xml:space="preserve">
    <value>Using alias directives should be placed after all using namespace directives</value>
  </data>
  <data name="SA1209Title" xml:space="preserve">
    <value>Using alias directives should be placed after other using directives</value>
  </data>
  <data name="SA1210Description" xml:space="preserve">
    <value>The using directives within a C# code file are not sorted alphabetically by namespace.</value>
  </data>
  <data name="SA1210MessageFormat" xml:space="preserve">
    <value>Using directives should be ordered alphabetically by the namespaces</value>
  </data>
  <data name="SA1210Title" xml:space="preserve">
    <value>Using directives should be ordered alphabetically by namespace</value>
  </data>
  <data name="SA1211Description" xml:space="preserve">
    <value>The using-alias directives within a C# code file are not sorted alphabetically by alias name.</value>
  </data>
  <data name="SA1211MessageFormat" xml:space="preserve">
    <value>Using alias directive for '{0}' should appear before using alias directive for '{1}'</value>
  </data>
  <data name="SA1211Title" xml:space="preserve">
    <value>Using alias directives should be ordered alphabetically by alias name</value>
  </data>
  <data name="SA1212Description" xml:space="preserve">
    <value>A get accessor appears after a set accessor within a property or indexer.</value>
  </data>
  <data name="SA1212MessageFormat" xml:space="preserve">
    <value>A get accessor appears after a set accessor within a property or indexer</value>
  </data>
  <data name="SA1212Title" xml:space="preserve">
    <value>Property accessors should follow order</value>
  </data>
  <data name="SA1213CodeFix" xml:space="preserve">
    <value>Fix accessor order</value>
  </data>
  <data name="SA1213Description" xml:space="preserve">
    <value>An add accessor appears after a remove accessor within an event.</value>
  </data>
  <data name="SA1213MessageFormat" xml:space="preserve">
    <value>Event accessors should follow order</value>
  </data>
  <data name="SA1213Title" xml:space="preserve">
    <value>Event accessors should follow order</value>
  </data>
  <data name="SA1214Description" xml:space="preserve">
    <value>A readonly field is positioned beneath a non-readonly field.</value>
  </data>
  <data name="SA1214MessageFormat" xml:space="preserve">
    <value>Readonly fields should appear before non-readonly fields</value>
  </data>
  <data name="SA1214Title" xml:space="preserve">
    <value>Readonly fields should appear before non-readonly fields</value>
  </data>
  <data name="SA1216Description" xml:space="preserve">
    <value>A using static directive is positioned before a regular or after an alias using directive.</value>
  </data>
  <data name="SA1216MessageFormat" xml:space="preserve">
    <value>Using static directives should be placed at the correct location</value>
  </data>
  <data name="SA1216Title" xml:space="preserve">
    <value>Using static directives should be placed at the correct location</value>
  </data>
  <data name="SA1217Description" xml:space="preserve">
    <value>All using static directives should be ordered alphabetically.</value>
  </data>
  <data name="SA1217MessageFormat" xml:space="preserve">
    <value>The using static directive for '{0}' should appear after the using static directive for '{1}'</value>
  </data>
  <data name="SA1217Title" xml:space="preserve">
    <value>Using static directives should be ordered alphabetically</value>
  </data>
  <data name="UsingCodeFix" xml:space="preserve">
    <value>Reorder using statements</value>
  </data>
</root>