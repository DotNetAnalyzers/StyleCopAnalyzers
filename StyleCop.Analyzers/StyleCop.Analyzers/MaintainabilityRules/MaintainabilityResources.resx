<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SA1119CodeFix" xml:space="preserve">
    <value>Remove parentheses</value>
  </data>
  <data name="SA1119Description" xml:space="preserve">
    <value>A C# statement contains parenthesis which are unnecessary and should be removed.</value>
  </data>
  <data name="SA1119MessageFormat" xml:space="preserve">
    <value>Statement should not use unnecessary parenthesis</value>
  </data>
  <data name="SA1119Title" xml:space="preserve">
    <value>Statement should not use unnecessary parenthesis</value>
  </data>
  <data name="SA1400CodeFix" xml:space="preserve">
    <value>Declare accessibility</value>
  </data>
  <data name="SA1400Description" xml:space="preserve">
    <value>The access modifier for a C# element has not been explicitly defined.</value>
  </data>
  <data name="SA1400MessageFormat" xml:space="preserve">
    <value>Element '{0}' should declare an access modifier</value>
  </data>
  <data name="SA1400Title" xml:space="preserve">
    <value>Access modifier should be declared</value>
  </data>
  <data name="SA1401Description" xml:space="preserve">
    <value>A field within a C# class has an access modifier other than private.</value>
  </data>
  <data name="SA1401MessageFormat" xml:space="preserve">
    <value>Field should be private</value>
  </data>
  <data name="SA1401Title" xml:space="preserve">
    <value>Fields should be private</value>
  </data>
  <data name="SA1402CodeFix" xml:space="preserve">
    <value>Move type to new file</value>
  </data>
  <data name="SA1402Description" xml:space="preserve">
    <value>A C# code file contains more than one unique type.</value>
  </data>
  <data name="SA1402MessageFormat" xml:space="preserve">
    <value>File may only contain a single type</value>
  </data>
  <data name="SA1402Title" xml:space="preserve">
    <value>File may only contain a single type</value>
  </data>
  <data name="SA1403Description" xml:space="preserve">
    <value>A C# code file contains more than one namespace.</value>
  </data>
  <data name="SA1403MessageFormat" xml:space="preserve">
    <value>File may only contain a single namespace</value>
  </data>
  <data name="SA1403Title" xml:space="preserve">
    <value>File may only contain a single namespace</value>
  </data>
  <data name="SA1404CodeFix" xml:space="preserve">
    <value>Fix justification</value>
  </data>
  <data name="SA1404Description" xml:space="preserve">
    <value>A Code Analysis SuppressMessage attribute does not include a justification.</value>
  </data>
  <data name="SA1404MessageFormat" xml:space="preserve">
    <value>Code analysis suppression should have justification</value>
  </data>
  <data name="SA1404Title" xml:space="preserve">
    <value>Code analysis suppression should have justification</value>
  </data>
  <data name="SA1405Description" xml:space="preserve">
    <value>A call to Debug.Assert in C# code does not include a descriptive message.</value>
  </data>
  <data name="SA1405MessageFormat" xml:space="preserve">
    <value>Debug.Assert should provide message text</value>
  </data>
  <data name="SA1405Title" xml:space="preserve">
    <value>Debug.Assert should provide message text</value>
  </data>
  <data name="SA1406Description" xml:space="preserve">
    <value>A call to Debug.Fail in C# code does not include a descriptive message.</value>
  </data>
  <data name="SA1406MessageFormat" xml:space="preserve">
    <value>Debug.Fail should provide message text</value>
  </data>
  <data name="SA1406Title" xml:space="preserve">
    <value>Debug.Fail should provide message text</value>
  </data>
  <data name="SA1407Description" xml:space="preserve">
    <value>A C# statement contains a complex arithmetic expression which omits parenthesis around operators.</value>
  </data>
  <data name="SA1407MessageFormat" xml:space="preserve">
    <value>Arithmetic expressions should declare precedence</value>
  </data>
  <data name="SA1407SA1408CodeFix" xml:space="preserve">
    <value>Add parentheses</value>
  </data>
  <data name="SA1407Title" xml:space="preserve">
    <value>Arithmetic expressions should declare precedence</value>
  </data>
  <data name="SA1408Description" xml:space="preserve">
    <value>A C# statement contains a complex conditional expression which omits parenthesis around operators.</value>
  </data>
  <data name="SA1408MessageFormat" xml:space="preserve">
    <value>Conditional expressions should declare precedence</value>
  </data>
  <data name="SA1408Title" xml:space="preserve">
    <value>Conditional expressions should declare precedence</value>
  </data>
  <data name="SA1409Description" xml:space="preserve">
    <value>A C# file contains code which is unnecessary and can be removed without changing the overall logic of the code.</value>
  </data>
  <data name="SA1409MessageFormat" xml:space="preserve">
    <value>TODO: Message format</value>
  </data>
  <data name="SA1409Title" xml:space="preserve">
    <value>Remove unnecessary code</value>
  </data>
  <data name="SA1410Description" xml:space="preserve">
    <value>A call to a C# anonymous method does not contain any method parameters, yet the statement still includes parenthesis.</value>
  </data>
  <data name="SA1410MessageFormat" xml:space="preserve">
    <value>Remove delegate parenthesis when possible</value>
  </data>
  <data name="SA1410SA1411CodeFix" xml:space="preserve">
    <value>Remove parentheses</value>
  </data>
  <data name="SA1410Title" xml:space="preserve">
    <value>Remove delegate parenthesis when possible</value>
  </data>
  <data name="SA1411Description" xml:space="preserve">
    <value>TODO.</value>
  </data>
  <data name="SA1411MessageFormat" xml:space="preserve">
    <value>Attribute constructor should not use unnecessary parenthesis</value>
  </data>
  <data name="SA1411Title" xml:space="preserve">
    <value>Attribute constructor should not use unnecessary parenthesis</value>
  </data>
  <data name="SA1412CodeFix" xml:space="preserve">
    <value>Change encoding from '{0}' to UTF-8 with byte order mark</value>
  </data>
  <data name="SA1412Description" xml:space="preserve">
    <value>Source files should be saved using the UTF-8 encoding with a byte order mark.</value>
  </data>
  <data name="SA1412MessageFormat" xml:space="preserve">
    <value>Store files as UTF-8 with byte order mark</value>
  </data>
  <data name="SA1412Title" xml:space="preserve">
    <value>Store files as UTF-8 with byte order mark</value>
  </data>
  <data name="SA1413CodeFix" xml:space="preserve">
    <value>Add trailing comma</value>
  </data>
  <data name="SA1413Description" xml:space="preserve">
    <value>A multi-line initializer in a C# code file should use a comma on the last line.</value>
  </data>
  <data name="SA1413MessageFormat" xml:space="preserve">
    <value>Use trailing comma in multi-line initializers</value>
  </data>
  <data name="SA1413Title" xml:space="preserve">
    <value>Use trailing comma in multi-line initializers</value>
  </data>
  <data name="SA1414Description" xml:space="preserve">
    <value>Tuple types appearing in member declarations should have explicitly named tuple elements.</value>
  </data>
  <data name="SA1414MessageFormat" xml:space="preserve">
    <value>Tuple types in signatures should have element names</value>
  </data>
  <data name="SA1414Title" xml:space="preserve">
    <value>Tuple types in signatures should have element names</value>
  </data>
</root>