<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RenameToCodeFix" xml:space="preserve">
    <value>Rename To '{0}'</value>
  </data>
  <data name="SA1300Description" xml:space="preserve">
    <value>The name of a C# element does not begin with an upper-case letter.</value>
  </data>
  <data name="SA1300MessageFormat" xml:space="preserve">
    <value>Element '{0}' should begin with an uppercase letter</value>
  </data>
  <data name="SA1300Title" xml:space="preserve">
    <value>Element should begin with upper-case letter</value>
  </data>
  <data name="SA1301Description" xml:space="preserve">
    <value>There are currently no situations in which this rule will fire.</value>
  </data>
  <data name="SA1301MessageFormat" xml:space="preserve">
    <value>Element should begin with lower-case letter</value>
  </data>
  <data name="SA1301Title" xml:space="preserve">
    <value>Element should begin with lower-case letter</value>
  </data>
  <data name="SA1302CodeFix" xml:space="preserve">
    <value>Prefix interface name with 'I'</value>
  </data>
  <data name="SA1302Description" xml:space="preserve">
    <value>The name of a C# interface does not begin with the capital letter I.</value>
  </data>
  <data name="SA1302MessageFormat" xml:space="preserve">
    <value>Interface names should begin with I</value>
  </data>
  <data name="SA1302Title" xml:space="preserve">
    <value>Interface names should begin with I</value>
  </data>
  <data name="SA1303Description" xml:space="preserve">
    <value>The name of a constant C# field should begin with an upper-case letter.</value>
  </data>
  <data name="SA1303MessageFormat" xml:space="preserve">
    <value>Const field names should begin with upper-case letter</value>
  </data>
  <data name="SA1303Title" xml:space="preserve">
    <value>Const field names should begin with upper-case letter</value>
  </data>
  <data name="SA1304Description" xml:space="preserve">
    <value>The name of a non-private readonly C# field should being with an upper-case letter.</value>
  </data>
  <data name="SA1304MessageFormat" xml:space="preserve">
    <value>Non-private readonly fields should begin with upper-case letter</value>
  </data>
  <data name="SA1304Title" xml:space="preserve">
    <value>Non-private readonly fields should begin with upper-case letter</value>
  </data>
  <data name="SA1305Description" xml:space="preserve">
    <value>The name of a field or variable in C# uses Hungarian notation.</value>
  </data>
  <data name="SA1305MessageFormat" xml:space="preserve">
    <value>{0} '{1}' should not use Hungarian notation</value>
  </data>
  <data name="SA1305Title" xml:space="preserve">
    <value>Field names should not use Hungarian notation</value>
  </data>
  <data name="SA1306Description" xml:space="preserve">
    <value>The name of a field in C# does not begin with a lower-case letter.</value>
  </data>
  <data name="SA1306MessageFormat" xml:space="preserve">
    <value>Field '{0}' should begin with lower-case letter</value>
  </data>
  <data name="SA1306Title" xml:space="preserve">
    <value>Field names should begin with lower-case letter</value>
  </data>
  <data name="SA1307Description" xml:space="preserve">
    <value>The name of a public or internal field in C# does not begin with an upper-case letter.</value>
  </data>
  <data name="SA1307MessageFormat" xml:space="preserve">
    <value>Field '{0}' should begin with upper-case letter</value>
  </data>
  <data name="SA1307Title" xml:space="preserve">
    <value>Accessible fields should begin with upper-case letter</value>
  </data>
  <data name="SA1308Description" xml:space="preserve">
    <value>A field name in C# is prefixed with 'm_', 's_', or 't_'.</value>
  </data>
  <data name="SA1308MessageFormat" xml:space="preserve">
    <value>Field '{0}' should not begin with the prefix '{1}'</value>
  </data>
  <data name="SA1308Title" xml:space="preserve">
    <value>Variable names should not be prefixed</value>
  </data>
  <data name="SA1309Description" xml:space="preserve">
    <value>A field name in C# begins with an underscore.</value>
  </data>
  <data name="SA1309MessageFormat" xml:space="preserve">
    <value>Field '{0}' should not begin with an underscore</value>
  </data>
  <data name="SA1309Title" xml:space="preserve">
    <value>Field names should not begin with underscore</value>
  </data>
  <data name="SA1310Description" xml:space="preserve">
    <value>A field name in C# contains an underscore.</value>
  </data>
  <data name="SA1310MessageFormat" xml:space="preserve">
    <value>Field '{0}' should not contain an underscore</value>
  </data>
  <data name="SA1310Title" xml:space="preserve">
    <value>Field names should not contain underscore</value>
  </data>
  <data name="SA1311Description" xml:space="preserve">
    <value>The name of a static readonly field does not begin with an upper-case letter.</value>
  </data>
  <data name="SA1311MessageFormat" xml:space="preserve">
    <value>Static readonly fields should begin with upper-case letter</value>
  </data>
  <data name="SA1311Title" xml:space="preserve">
    <value>Static readonly fields should begin with upper-case letter</value>
  </data>
  <data name="SA1312Description" xml:space="preserve">
    <value>The name of a variable in C# does not begin with a lower-case letter.</value>
  </data>
  <data name="SA1312MessageFormat" xml:space="preserve">
    <value>Variable '{0}' should begin with lower-case letter</value>
  </data>
  <data name="SA1312Title" xml:space="preserve">
    <value>Variable names should begin with lower-case letter</value>
  </data>
  <data name="SA1313Description" xml:space="preserve">
    <value>The name of a parameter in C# does not begin with a lower-case letter.</value>
  </data>
  <data name="SA1313MessageFormat" xml:space="preserve">
    <value>Parameter '{0}' should begin with lower-case letter</value>
  </data>
  <data name="SA1313Title" xml:space="preserve">
    <value>Parameter names should begin with lower-case letter</value>
  </data>
  <data name="SA1314CodeFix" xml:space="preserve">
    <value>Prefix type parameter name with 'T'</value>
  </data>
  <data name="SA1314Description" xml:space="preserve">
    <value>The name of a C# type parameter does not begin with the capital letter T.</value>
  </data>
  <data name="SA1314MessageFormat" xml:space="preserve">
    <value>Type parameter names should begin with T</value>
  </data>
  <data name="SA1314Title" xml:space="preserve">
    <value>Type parameter names should begin with T</value>
  </data>
  <data name="SA1316CodeFix" xml:space="preserve">
    <value>Correct tuple element name casing</value>
  </data>
  <data name="SA1316Description" xml:space="preserve">
    <value>Element names within a tuple type should have the correct casing.</value>
  </data>
  <data name="SA1316MessageFormat" xml:space="preserve">
    <value>Tuple element names should use correct casing</value>
  </data>
  <data name="SA1316Title" xml:space="preserve">
    <value>Tuple element names should use correct casing</value>
  </data>
  <data name="SX1309Description" xml:space="preserve">
    <value>A field name in C# does not begin with an underscore.</value>
  </data>
  <data name="SX1309MessageFormat" xml:space="preserve">
    <value>Field '{0}' should begin with an underscore</value>
  </data>
  <data name="SX1309SDescription" xml:space="preserve">
    <value>A static field name in C# does not begin with an underscore.</value>
  </data>
  <data name="SX1309SMessageFormat" xml:space="preserve">
    <value>Static field '{0}' should begin with an underscore</value>
  </data>
  <data name="SX1309STitle" xml:space="preserve">
    <value>Static field names should begin with underscore</value>
  </data>
  <data name="SX1309Title" xml:space="preserve">
    <value>Field names should begin with underscore</value>
  </data>
</root>