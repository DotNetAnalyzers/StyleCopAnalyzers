// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

namespace StyleCop.Analyzers.Test
{
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.CodeAnalysis.Diagnostics;
    using TestHelper;
    using Xunit;

    /// <summary>
    /// Unit tests for testing exclusion of auto generated files.
    /// </summary>
    public class ExclusionTests : DiagnosticVerifier
    {
        private const string TestSettings = @"
{
  ""settings"": {
    ""generatedFileFilters"": [ ""\\.custom\\.cs$"", ""\\.extension\\.cs$"" ]
  }
}
";

        private string customSettings;

        /// <summary>
        /// Gets the statements that will be used in the theory test cases.
        /// </summary>
        /// <value>
        /// The statements that will be used in the theory test cases.
        /// </value>
        public static IEnumerable<object[]> ShouldBeExcluded
        {
            get
            {
                yield return new[] { "Test.cs", string.Empty };
                yield return new[] { "Test.cs", "   " };
                yield return new[] { "Test.cs", "\r\n\r\n" };
                yield return new[] { "Test.cs", "\t" };
                yield return new[] { "Test.designer.cs", "class Foo { }" };
                yield return new[] { "Test.cs", "// <auto-generated" };
                yield return new[] { "Test.cs", "// <autogenerated" };
                yield return new[] { "Test.g.cs", "class Foo { }" };
                yield return new[] { "Test.generated.cs", "class Foo { }" };
                yield return new[] { "Test.g.i.cs", "class Foo { }" };
            }
        }

        /// <summary>
        /// Gets the statements that will be used in the theory test cases.
        /// </summary>
        /// <value>
        /// The statements that will be used in the theory test cases.
        /// </value>
        public static IEnumerable<object[]> ShouldNotBeExcluded
        {
            get
            {
                yield return new[] { "Test.designerr.cs", "class Foo { }" };
                yield return new[] { "Test.cs", "// <auto--generated" };
                yield return new[] { "Test.cs", "/// <auto-generated" };
                yield return new[] { "Test.cs", "\t\r\n class Foo { }" };
                yield return new[] { "Test.gg.cs", "class Foo { }" };
                yield return new[] { "Test.generatedd.cs", "class Foo { }" };
                yield return new[] { "Test.g.ii.cs", "class Foo { }" };
            }
        }

        /// <summary>
        /// Gets the statements that will be used in the theory test cases.
        /// </summary>
        /// <value>
        /// The statements that will be used in the theory test cases.
        /// </value>
        public static IEnumerable<object[]> ShouldBeExcludedWithCustomSettings
        {
            get
            {
                yield return new[] { "Test.custom.cs", "class Foo { }" };
                yield return new[] { "Test.extension.cs", "class Foo { }" };
            }
        }

        /// <summary>
        /// Gets the statements that will be used in the theory test cases.
        /// </summary>
        /// <value>
        /// The statements that will be used in the theory test cases.
        /// </value>
        public static IEnumerable<object[]> ShouldNotBeExcludedWithCustomSettings
        {
            get
            {
                yield return new[] { "Test.designer.cs", "class Foo { }" };
                yield return new[] { "Test.g.cs", "class Foo { }" };
                yield return new[] { "Test.generated.cs", "class Foo { }" };
                yield return new[] { "Test.g.i.cs", "class Foo { }" };
            }
        }

        /// <summary>
        /// Verifies that the source file is excluded from analysis.
        /// </summary>
        /// <param name="filename">The filename</param>
        /// <param name="testCode">The code to test</param>
        /// <returns>A <see cref="Task"/> representing the asynchronous unit test.</returns>
        [Theory]
        [MemberData(nameof(ShouldBeExcluded))]
        public async Task TestIsExcludedAsync(string filename, string testCode)
        {
            await this.VerifyCSharpDiagnosticAsync(testCode, EmptyDiagnosticResults, CancellationToken.None, filename: filename).ConfigureAwait(false);
        }

        /// <summary>
        /// Verifies that the source file is not excluded from analysis.
        /// </summary>
        /// <param name="filename">The filename</param>
        /// <param name="testCode">The code to test</param>
        /// <returns>A <see cref="Task"/> representing the asynchronous unit test.</returns>
        [Theory]
        [MemberData(nameof(ShouldNotBeExcluded))]
        public async Task TestIsNotExcludedAsync(string filename, string testCode)
        {
            var result = this.CSharpDiagnostic().WithLocation(filename, 1, 1);

            await this.VerifyCSharpDiagnosticAsync(testCode, result, CancellationToken.None, filename: filename).ConfigureAwait(false);
        }

        /// <summary>
        /// Verifies that the source file is excluded from analysis with custom settings.
        /// </summary>
        /// <param name="filename">The filename</param>
        /// <param name="testCode">The code to test</param>
        /// <returns>A <see cref="Task"/> representing the asynchronous unit test.</returns>
        [Theory]
        [MemberData(nameof(ShouldBeExcludedWithCustomSettings))]
        public async Task TestIsExcludedWithCustomSettingsAsync(string filename, string testCode)
        {
            this.customSettings = TestSettings;

            await this.VerifyCSharpDiagnosticAsync(testCode, EmptyDiagnosticResults, CancellationToken.None, filename: filename).ConfigureAwait(false);
        }

        /// <summary>
        /// Verifies that the source file is not excluded from analysis with custom settings.
        /// </summary>
        /// <param name="filename">The filename</param>
        /// <param name="testCode">The code to test</param>
        /// <returns>A <see cref="Task"/> representing the asynchronous unit test.</returns>
        [Theory]
        [MemberData(nameof(ShouldNotBeExcludedWithCustomSettings))]
        public async Task TestIsNotExcludedWithCustomSettingsAsync(string filename, string testCode)
        {
            this.customSettings = TestSettings;

            var result = this.CSharpDiagnostic().WithLocation(filename, 1, 1);

            await this.VerifyCSharpDiagnosticAsync(testCode, result, CancellationToken.None, filename: filename).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        protected override string GetSettings()
        {
            if (!string.IsNullOrEmpty(this.customSettings))
            {
                return this.customSettings;
            }

            return base.GetSettings();
        }

        /// <inheritdoc/>
        protected override IEnumerable<DiagnosticAnalyzer> GetCSharpDiagnosticAnalyzers()
        {
            yield return new ExclusionTestAnalyzer();
        }
    }
}
